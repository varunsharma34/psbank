{"version":3,"file":"static/js/884.664f0360.chunk.js","mappings":"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","sources":["components/atoms/form-components/input/index.js","components/atoms/form-components/select/index.js","components/organisms/form/index.js","form-structures/signup.js","pages/Signup.js"],"sourcesContent":["import { TextField } from '@mui/material';\nimport { Controller } from 'react-hook-form';\n\nconst FormInputField = ({\n  name,\n  control,\n  label,\n  type = 'text',\n  required = false,\n  pattern,\n  formstate,\n  register,\n}) => {\n  return (\n    <Controller\n      name={name}\n      control={control}\n      render={(field) => (\n        <TextField\n          InputLabelProps={{ shrink: type === 'date' || field.value }}\n          fullWidth\n          type={type}\n          label={label}\n          variant='outlined'\n          name={name}\n          error={!!formstate.errors[name]}\n          helperText={\n            formstate.errors[name] ? formstate.errors[name].message : ''\n          }\n          {...register(name, {\n            required, // JS only: <p>error message</p> TS only support string\n            pattern,\n          })}\n        />\n      )}\n      defaultValue=''\n    />\n  );\n};\n\nexport default FormInputField;\n","import { FormControl, InputLabel, Select, FormHelperText } from '@mui/material';\nimport { Controller } from 'react-hook-form';\n\nconst ReactHookFormSelect = ({\n  name,\n  label,\n  control,\n  defaultValue,\n  children,\n  errors,\n  ...props\n}) => {\n  const labelId = `${name}-label`;\n  return (\n    <FormControl fullWidth {...props}>\n      <InputLabel id={labelId}>{label}</InputLabel>\n      <Controller\n        defaultValue={defaultValue}\n        render={({ field }) => (\n          <Select {...field} labelId={labelId} label={label}>\n            {children}\n          </Select>\n        )}\n        name={name}\n        control={control}\n      />\n      <FormHelperText>\n        {errors['type'] ? errors['type'].message : ''}\n      </FormHelperText>\n    </FormControl>\n  );\n};\nexport default ReactHookFormSelect;\n","import { Button, MenuItem, Grid } from '@mui/material';\nimport { useForm } from 'react-hook-form';\nimport FormInputField from '../../atoms/form-components/input';\nimport ReactHookFormSelect from '../../atoms/form-components/select';\n\nconst Form = ({ data, formSubmitHandler, children }) => {\n  const { formFields, submitButtonText = 'Submit' } = data;\n  const { register, handleSubmit, control, formState } = useForm({\n    mode: 'all',\n  });\n\n  const onFormSubmit = (data) => {\n    formSubmitHandler(data);\n  };\n\n  return (\n    <form onSubmit={handleSubmit(onFormSubmit)}>\n      <Grid container direction='column' spacing={2} justifyContent='center'>\n        {formFields.length &&\n          formFields.map((field) => {\n            return field.type === 'select' ? (\n              <Grid item xs={12} key={field.name}>\n                <ReactHookFormSelect\n                  id={field.name}\n                  name={field.name}\n                  label={field.label}\n                  control={control}\n                  defaultValue={\n                    field.options &&\n                    field.options.length &&\n                    field.options[0].value\n                  }\n                  errors={formState.errors}\n                  error={!!formState.errors['type']}\n                >\n                  {field.options &&\n                    field.options.length &&\n                    field.options.map((option) => {\n                      return (\n                        <MenuItem key={option.value} value={option.value}>\n                          {option.name}\n                        </MenuItem>\n                      );\n                    })}\n                </ReactHookFormSelect>\n              </Grid>\n            ) : (\n              <Grid item xs={12} key={field.name}>\n                <FormInputField\n                  name={field.name}\n                  label={field.label}\n                  type={field.type}\n                  control={control}\n                  register={register}\n                  formstate={formState}\n                  required={field.required}\n                  pattern={field.pattern}\n                />\n              </Grid>\n            );\n          })}\n\n        <Grid item xs={12}>\n          <Button\n            fullWidth\n            size='large'\n            type='submit'\n            variant='contained'\n            color='primary'\n          >\n            {submitButtonText}\n          </Button>\n        </Grid>\n\n        {children}\n      </Grid>\n    </form>\n  );\n};\n\nexport default Form;\n","const SignupForm = {\n  formName: 'Signup',\n  submitButtonText: 'Sign Up',\n  formFields: [\n    {\n      label: 'Name',\n      name: 'name',\n      type: 'text',\n      required: {\n        value: true,\n        message: 'Name is required',\n      },\n      defaultValue: '',\n    },\n    {\n      label: 'Email',\n      name: 'email',\n      type: 'text',\n      required: {\n        value: true,\n        message: 'Email is required',\n      },\n      pattern: {\n        value: /^[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$/,\n        message: 'Invalid email format',\n      },\n      defaultValue: '',\n    },\n    {\n      label: 'Password',\n      name: 'password',\n      type: 'password',\n      required: {\n        value: true,\n        message: 'Password is required',\n      },\n      pattern: {\n        value:\n          /(?=^.{8,}$)(?=.*\\d)(?=.*[!@#$%^&*]+)(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$/,\n        message: `The password must contain uppercase, lowercase, nummeric and special characters. Password length must be greater than or equal to 8.`,\n      },\n      defaultValue: '',\n    },\n    {\n      label: 'Date of birth',\n      name: 'dob',\n      type: 'date',\n      required: {\n        value: true,\n        message: 'Date is required',\n      },\n      defaultValue: '',\n    },\n    {\n      label: 'Phone',\n      name: 'phone',\n      type: 'number',\n      required: {\n        value: true,\n        message: 'Phone is required',\n      },\n      defaultValue: '',\n    },\n    {\n      label: 'Address',\n      name: 'address',\n      type: 'text',\n      required: {\n        value: true,\n        message: 'Address is required',\n      },\n      defaultValue: '',\n    },\n    {\n      label: 'Occupation',\n      name: 'occupation',\n      type: 'text',\n      required: {\n        value: true,\n        message: 'Occupation is required',\n      },\n      defaultValue: '',\n    },\n    {\n      label: 'Annual Income',\n      name: 'income',\n      type: 'number',\n      required: {\n        value: true,\n        message: 'Please provide your annual income',\n      },\n      defaultValue: '',\n    },\n    {\n      label: 'Government ID',\n      name: 'govt_id',\n      type: 'text',\n      required: {\n        value: true,\n        message: 'Please provide your Government Id number',\n      },\n      defaultValue: '',\n    },\n  ],\n};\n\nexport default SignupForm;\n","import { useContext, useState } from 'react';\nimport { useLocation, useNavigate, Link } from 'react-router-dom';\nimport { UserContext } from '../contexts/user.context';\nimport Form from '../components/organisms/form';\nimport SignupForm from '../form-structures/signup';\nimport { Grid, Typography, Alert } from '@mui/material';\nimport PageContainer from '../components/molecules/container';\n\nconst Signup = () => {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const [signupFormError, setSignupFormError] = useState();\n\n  const { emailPasswordSignup } = useContext(UserContext);\n\n  const redirectNow = () => {\n    const redirectTo = location.search.replace('?redirectTo=', '');\n    navigate(redirectTo ? redirectTo : '/');\n  };\n\n  const formSubmitHandler = async (data) => {\n    try {\n      const user = await emailPasswordSignup({\n        email: data.email,\n        password: data.password,\n      });\n      if (user) {\n        const mongo = user.mongoClient('mongodb-atlas');\n        const collection = mongo.db('psbank').collection('users');\n        const updateDoc = {\n          userID: user.id,\n          dob: data.dob,\n          name: data.name,\n          address: data.address,\n          govtId: data.govt_id,\n          income: data.income,\n          phone: data.phone,\n        };\n        const result = await collection.insertOne(updateDoc);\n        console.log(result);\n\n        const customUserData = await user.refreshCustomData();\n        console.log(customUserData);\n\n        redirectNow();\n      }\n    } catch (error) {\n      const errorMessage =\n        error.errorCode === 'AccountNameInUse'\n          ? `User already exist with email : ${data.email}`\n          : 'Signup failed. Please try again!';\n\n      setSignupFormError(errorMessage);\n    }\n  };\n\n  return (\n    <PageContainer type='formpage'>\n      <h1>Signup</h1>\n      {signupFormError && (\n        <Alert severity='error' sx={{ marginBottom: '20px' }}>\n          {signupFormError}\n        </Alert>\n      )}\n      <Form data={SignupForm} formSubmitHandler={formSubmitHandler}>\n        <Grid item xs={12} marginBottom='20px'>\n          <Typography>\n            Already have an account? <Link to='/login'>Login</Link>\n          </Typography>\n        </Grid>\n      </Form>\n    </PageContainer>\n  );\n};\n\nexport default Signup;\n"],"names":["_ref","name","control","label","_ref$type","type","_ref$required","required","pattern","formstate","register","_jsx","Controller","render","field","TextField","_objectSpread","InputLabelProps","shrink","value","fullWidth","variant","error","errors","helperText","message","defaultValue","children","props","_objectWithoutProperties","_excluded","labelId","concat","_jsxs","FormControl","InputLabel","id","_ref2","Select","FormHelperText","data","formSubmitHandler","formFields","_data$submitButtonTex","submitButtonText","_useForm","useForm","mode","handleSubmit","formState","onSubmit","Grid","container","direction","spacing","justifyContent","length","map","item","xs","ReactHookFormSelect","options","option","MenuItem","FormInputField","Button","size","color","formName","navigate","useNavigate","location","useLocation","_useState","useState","_useState2","_slicedToArray","signupFormError","setSignupFormError","emailPasswordSignup","useContext","UserContext","redirectNow","redirectTo","search","replace","_asyncToGenerator","_regeneratorRuntime","mark","_callee","user","mongo","collection","updateDoc","result","customUserData","errorMessage","wrap","_context","prev","next","email","password","sent","mongoClient","db","userID","dob","address","govtId","govt_id","income","phone","insertOne","console","log","refreshCustomData","t0","errorCode","stop","_x","apply","arguments","PageContainer","Alert","severity","sx","marginBottom","Form","SignupForm","Typography","Link","to"],"sourceRoot":""}