{"version":3,"file":"static/js/884.c20b8dcb.chunk.js","mappings":"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","sources":["components/atoms/form-components/input/index.js","components/atoms/form-components/select/index.js","components/organisms/form/index.js","form-structures/signup.js","pages/Signup.js"],"sourcesContent":["import { TextField } from '@mui/material';\nimport { Controller } from 'react-hook-form';\n\nconst FormInputField = ({\n  name,\n  control,\n  label,\n  type = 'text',\n  required = false,\n  formstate,\n  register,\n}) => {\n  return (\n    <Controller\n      name={name}\n      control={control}\n      render={(field) => (\n        <TextField\n          InputLabelProps={{ shrink: type === 'date' || field.value }}\n          fullWidth\n          type={type}\n          label={label}\n          variant='outlined'\n          name={name}\n          error={!!formstate.errors[name]}\n          helperText={\n            formstate.errors[name] ? formstate.errors[name].message : ''\n          }\n          {...register(name, {\n            required, // JS only: <p>error message</p> TS only support string\n          })}\n        />\n      )}\n      defaultValue=''\n    />\n  );\n};\n\nexport default FormInputField;\n","import { FormControl, InputLabel, Select, FormHelperText } from '@mui/material';\nimport { Controller } from 'react-hook-form';\n\nconst ReactHookFormSelect = ({\n  name,\n  label,\n  control,\n  defaultValue,\n  children,\n  errors,\n  ...props\n}) => {\n  const labelId = `${name}-label`;\n  return (\n    <FormControl fullWidth {...props}>\n      <InputLabel id={labelId}>{label}</InputLabel>\n      <Controller\n        defaultValue={defaultValue}\n        render={({ field }) => (\n          <Select {...field} labelId={labelId} label={label}>\n            {children}\n          </Select>\n        )}\n        name={name}\n        control={control}\n      />\n      <FormHelperText>\n        {errors['type'] ? errors['type'].message : ''}\n      </FormHelperText>\n    </FormControl>\n  );\n};\nexport default ReactHookFormSelect;\n","import { Button, MenuItem, Grid } from '@mui/material';\nimport { useForm } from 'react-hook-form';\nimport FormInputField from '../../atoms/form-components/input';\nimport ReactHookFormSelect from '../../atoms/form-components/select';\n\nconst Form = ({ data, formSubmitHandler, children }) => {\n  const { formFields, submitButtonText = 'Submit' } = data;\n  const { register, handleSubmit, control, formState } = useForm();\n\n  const onFormSubmit = (data) => {\n    formSubmitHandler(data);\n  };\n\n  return (\n    <form onSubmit={handleSubmit(onFormSubmit)}>\n      <Grid container direction='column' spacing={2} justifyContent='center'>\n        {formFields.length &&\n          formFields.map((field) => {\n            return field.type === 'select' ? (\n              <Grid item xs={12} key={field.name}>\n                <ReactHookFormSelect\n                  id={field.name}\n                  name={field.name}\n                  label={field.label}\n                  control={control}\n                  defaultValue={\n                    field.options &&\n                    field.options.length &&\n                    field.options[0].value\n                  }\n                  errors={formState.errors}\n                  error={!!formState.errors['type']}\n                >\n                  {field.options &&\n                    field.options.length &&\n                    field.options.map((option) => {\n                      return (\n                        <MenuItem key={option.value} value={option.value}>\n                          {option.name}\n                        </MenuItem>\n                      );\n                    })}\n                </ReactHookFormSelect>\n              </Grid>\n            ) : (\n              <Grid item xs={12} key={field.name}>\n                <FormInputField\n                  name={field.name}\n                  label={field.label}\n                  type={field.type}\n                  control={control}\n                  register={register}\n                  formstate={formState}\n                  required={field.required}\n                />\n              </Grid>\n            );\n          })}\n\n        <Grid item xs={12}>\n          <Button\n            fullWidth\n            size='large'\n            type='submit'\n            variant='contained'\n            color='primary'\n          >\n            {submitButtonText}\n          </Button>\n        </Grid>\n\n        {children}\n      </Grid>\n    </form>\n  );\n};\n\nexport default Form;\n","const SignupForm = {\n  formName: 'Signup',\n  submitButtonText: 'Sign Up',\n  formFields: [\n    {\n      label: 'Name',\n      name: 'name',\n      type: 'text',\n      required: {\n        value: true,\n        message: 'Name is required',\n      },\n      defaultValue: '',\n    },\n    {\n      label: 'Email',\n      name: 'email',\n      type: 'text',\n      required: {\n        value: true,\n        message: 'Email is required',\n      },\n      defaultValue: '',\n    },\n    {\n      label: 'Password',\n      name: 'password',\n      type: 'password',\n      required: {\n        value: true,\n        message: 'Password is required',\n      },\n      defaultValue: '',\n    },\n    {\n      label: 'Date of birth',\n      name: 'dob',\n      type: 'date',\n      required: {\n        value: true,\n        message: 'Date is required',\n      },\n      defaultValue: '',\n    },\n    {\n      label: 'Phone',\n      name: 'phone',\n      type: 'number',\n      required: {\n        value: true,\n        message: 'Phone is required',\n      },\n      defaultValue: '',\n    },\n    {\n      label: 'Address',\n      name: 'address',\n      type: 'text',\n      required: {\n        value: true,\n        message: 'Address is required',\n      },\n      defaultValue: '',\n    },\n    {\n      label: 'Occupation',\n      name: 'occupation',\n      type: 'text',\n      required: {\n        value: true,\n        message: 'Occupation is required',\n      },\n      defaultValue: '',\n    },\n    {\n      label: 'Annual Income',\n      name: 'income',\n      type: 'number',\n      required: {\n        value: true,\n        message: 'Please provide your annual income',\n      },\n      defaultValue: '',\n    },\n    {\n      label: 'Government ID',\n      name: 'govt_id',\n      type: 'text',\n      required: {\n        value: true,\n        message: 'Please provide your Government Id number',\n      },\n      defaultValue: '',\n    },\n  ],\n};\n\nexport default SignupForm;\n","import { useContext, useState } from 'react';\nimport { useLocation, useNavigate, Link } from 'react-router-dom';\nimport { UserContext } from '../contexts/user.context';\nimport Form from '../components/organisms/form';\nimport SignupForm from '../form-structures/signup';\nimport { Grid, Typography, Alert } from '@mui/material';\nimport PageContainer from '../components/molecules/container';\n\nconst Signup = () => {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const [signupFormError, setSignupFormError] = useState();\n\n  const { emailPasswordSignup } = useContext(UserContext);\n\n  const redirectNow = () => {\n    const redirectTo = location.search.replace('?redirectTo=', '');\n    navigate(redirectTo ? redirectTo : '/');\n  };\n\n  const formSubmitHandler = async (data) => {\n    try {\n      const user = await emailPasswordSignup({\n        email: data.email,\n        password: data.password,\n      });\n      if (user) {\n        const mongo = user.mongoClient('mongodb-atlas');\n        const collection = mongo.db('psbank').collection('users');\n        const updateDoc = {\n          userID: user.id,\n          dob: data.dob,\n          name: data.name,\n          address: data.address,\n          govtId: data.govt_id,\n          income: data.income,\n          phone: data.phone,\n        };\n        const result = await collection.insertOne(updateDoc);\n        console.log(result);\n\n        const customUserData = await user.refreshCustomData();\n        console.log(customUserData);\n\n        redirectNow();\n      }\n    } catch (error) {\n      const errorMessage =\n        error.errorCode === 'AccountNameInUse'\n          ? `User already exist with email : ${data.email}`\n          : 'Signup failed. Please try again!';\n\n      setSignupFormError(errorMessage);\n    }\n  };\n\n  return (\n    <PageContainer type='formpage'>\n      <h1>Signup</h1>\n      {signupFormError && (\n        <Alert severity='error' sx={{ marginBottom: '20px' }}>\n          {signupFormError}\n        </Alert>\n      )}\n      <Form data={SignupForm} formSubmitHandler={formSubmitHandler}>\n        <Grid item xs={12} marginBottom='20px'>\n          <Typography>\n            Already have an account? <Link to='/login'>Login</Link>\n          </Typography>\n        </Grid>\n      </Form>\n    </PageContainer>\n  );\n};\n\nexport default Signup;\n"],"names":["_ref","name","control","label","_ref$type","type","_ref$required","required","formstate","register","_jsx","Controller","render","field","TextField","_objectSpread","InputLabelProps","shrink","value","fullWidth","variant","error","errors","helperText","message","defaultValue","children","props","_objectWithoutProperties","_excluded","labelId","concat","_jsxs","FormControl","InputLabel","id","_ref2","Select","FormHelperText","data","formSubmitHandler","formFields","_data$submitButtonTex","submitButtonText","_useForm","useForm","handleSubmit","formState","onSubmit","Grid","container","direction","spacing","justifyContent","length","map","item","xs","ReactHookFormSelect","options","option","MenuItem","FormInputField","Button","size","color","formName","navigate","useNavigate","location","useLocation","_useState","useState","_useState2","_slicedToArray","signupFormError","setSignupFormError","emailPasswordSignup","useContext","UserContext","redirectNow","redirectTo","search","replace","_asyncToGenerator","_regeneratorRuntime","mark","_callee","user","mongo","collection","updateDoc","result","customUserData","errorMessage","wrap","_context","prev","next","email","password","sent","mongoClient","db","userID","dob","address","govtId","govt_id","income","phone","insertOne","console","log","refreshCustomData","t0","errorCode","stop","_x","apply","arguments","PageContainer","Alert","severity","sx","marginBottom","Form","SignupForm","Typography","Link","to"],"sourceRoot":""}